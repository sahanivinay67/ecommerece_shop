name: "Release"

on:
  push:
    branches: [test]
  workflow_dispatch:

jobs:
  build:
    name: Build & Release
    runs-on: macos-latest

    steps:
      # Checkout repository
      - uses: actions/checkout@v3

      # Setup Java
      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      # Setup Flutter
      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          architecture: x64

      # Cache Flutter dependencies
      - name: Cache Flutter pub
        uses: actions/cache@v3
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.yaml') }}
          restore-keys: ${{ runner.os }}-flutter-

      # Cache Gradle
      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle-

      # Clean & Get Dependencies
      - run: flutter clean
      - run: flutter pub get

      # Setup keystore for Android
      - name: Setup keystore
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android/app/keystore.jks
          cat > android/key.properties <<EOF
          storePassword=${{ secrets.KEYSTORE_PASSWORD }}
          keyPassword=${{ secrets.KEY_PASSWORD }}
          keyAlias=${{ secrets.KEY_ALIAS }}
          storeFile=keystore.jks
          EOF

      # Extract version from pubspec.yaml
      - name: Extract app version
        id: version
        run: |
          VERSION=$(grep '^version:' pubspec.yaml | awk '{print $2}' | cut -d+ -f1)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      # Build Android Apks
      - name: Build Android Normal APK and release APK
        run: |
          flutter build apk
          flutter build apk --release --split-per-abi

      # Build iOS app (no code signing)
      - name: Build iOS IPA (no codesign)
        run: |
          flutter build ios --no-codesign
          cd build/ios/iphoneos
          mkdir -p Payload
          cp -r Runner.app Payload/
          zip -r app.ipa Payload
        shell: bash

      # Upload to GitHub Releases
      - name: Publish Release
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ steps.version.outputs.version }}
          name: "Release v${{ steps.version.outputs.version }}"
          artifacts: |
            build/app/outputs/bundle/release/app-release.aab
            build/app/outputs/apk/release/app-release.apk
            build/ios/iphoneos/app.ipa
          token: ${{ secrets.TOKEN }}
          draft: false
          prerelease: false
